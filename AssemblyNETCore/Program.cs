/*
* (c) SavanDev 2020 - MIT License
*/
using System;
using System.IO;
using System.Net;
using System.Reflection;
using System.Text;
using System.Text.Json;
using GitHub;

namespace AssemblyNETCore
{
    class Program
    {
        static short majorVersion = 1;
        static short minorVersion = 0;
        static int buildNumber;
        static string path = null;

        static void Main(string[] args)
        {
            string repository = null;
            string dotnetPath = null;
            bool buildOnly = false;

            Console.WriteLine($"AssemblyInfo Generator [Version {Assembly.GetEntryAssembly().GetName().Version}]");
            Console.WriteLine("(SavanDev 2020 - MIT License)\n");

            if (args.Length == 0)
            {
                HelpScreen();
                return;
            }

            for (int i = 0; i < args.Length; i++)
            {
                switch (args[i])
                {
                    case "--repo":
                        repository = args[i + 1];
                        break;
                    case "--major":
                        majorVersion = Convert.ToInt16(args[i + 1]);
                        break;
                    case "--minor":
                        minorVersion = Convert.ToInt16(args[i + 1]);
                        break;
                    case "--out":
                        path = args[i + 1];
                        break;
                    case "--only-build":
                        buildOnly = true;
                        break;
                    case "--dotnet":
                        dotnetPath = args[i + 1];
                        break;
                    case "--help":
                        HelpScreen();
                        return;
                }
            }

            if (repository != null)
            {
                Console.WriteLine("Getting response from GitHub...");
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                var client = new WebClient();
                client.Headers.Add(HttpRequestHeader.UserAgent, "Terminal");
                string json = client.DownloadString("https://api.github.com/repos/" + repository);
                Root github = JsonSerializer.Deserialize<Root>(json);

                buildNumber = (int)(DateTime.Now - github.created_at).TotalDays;

                if (buildOnly)
                {
                    Console.WriteLine($"Build: {buildNumber}");
                    return;
                }

                if (dotnetPath != null)
                {
                    Console.WriteLine(GenerateDotNet(dotnetPath) ? "Success!" : "Failed!");
                }
                else
                {
                    Console.WriteLine(GenerateAssemblyCS(github) ? "Success!" : "Failed!");
                }
            }
            else
                Console.WriteLine("ERROR: The GitHub repository has not been set up.");
        }

        static void HelpScreen()
        {
            Console.WriteLine("--repo <User/Repo>: Set GitHub repository to get the data.");
            Console.WriteLine("--major <number>: Set major version.");
            Console.WriteLine("--minor <number>: Set minor version.");
            Console.WriteLine("--only-build: Show only the build number generated.");
            Console.WriteLine("--out <path>: Set output directory.");
            Console.WriteLine("--dotnet <projectFile>: Update version for .NET Core project.");
            Console.WriteLine("--help: Shows the help screen (this).");
        }

        static bool GenerateDotNet(string pathFile)
        {
            try
            {
                var file = File.ReadAllText(pathFile);
                var tagInit = file.IndexOf("<Version>") + 9;
                var tagEnd = file.IndexOf("</Version");
                file = file.Remove(tagInit, tagEnd - tagInit);
                file = file.Insert(tagInit, $"{majorVersion}.{minorVersion}.{buildNumber}.{DateTime.Now.Month}{DateTime.Now.Day}");
                File.WriteAllText(path != null ? path : pathFile, file);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR: {ex.Message}");
                return false;
            }

        }

        static bool GenerateAssemblyCS(Root data)
        {
            var assemblyContent = new StringBuilder();
            assemblyContent.AppendLine("// Generated by AssemblyGenerator");
            assemblyContent.AppendLine("using System;");
            assemblyContent.AppendLine("using System.Reflection;");
            assemblyContent.AppendLine("using System.Runtime.InteropServices;").AppendLine();

            assemblyContent.AppendLine($"[assembly: AssemblyCompany(\"{data.owner.login}\")]");
            assemblyContent.AppendLine($"[assembly: AssemblyTitle(\"{data.description}\")]");
            assemblyContent.AppendLine($"[assembly: AssemblyProduct(\"{data.name}\")]");
            assemblyContent.AppendLine($"[assembly: ComVisible(false)]");
            assemblyContent.AppendLine($"[assembly: AssemblyVersion(\"{majorVersion}.{minorVersion}.{buildNumber}.*\")]");
            assemblyContent.AppendLine($"[assembly: AssemblyCopyright(\"{data.license.name}\")]");

            try
            {
                File.WriteAllText(path != null ? path + "\\AssemblyInfo.cs" : "AssemblyInfo.cs", assemblyContent.ToString());
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR: {ex.Message}");
                return false;
            }
        }
    }
}
